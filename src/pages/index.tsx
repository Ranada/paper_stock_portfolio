import { type NextPage } from "next";
import Head from "next/head";
// import Link from "next/link";

import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "~/utils/api";

import { useState } from 'react';

import Form from './components/Form'

const Home: NextPage = () => {
  const [tickerInput, setTickerInput] = useState('');
  
  const hello = api.example.hello.useQuery({ text: "Track stocks and your target percentage holdings." });
  const stockInfo = api.stocks.getStockInfo.useQuery({ text: tickerInput });
  const postInvestment = api.stocks.postInvestment.useMutation({
    onSuccess: () => console.log("Great Success!"),
    onError: (e) => console.log("Post investment failed:", e)
  });

  console.log("HELLO FROM CLIENT! YOUR INPUT IS: ", tickerInput);
  console.log("HELLO FROM CLIENT! YOUR STOCK INFO: ", stockInfo.data);
  console.log("HELLO FROM CLIENT! POST INFO: ", postInvestment.data);

  const handleAddToPortfolio = (event: React.MouseEvent) => {
    console.log("From handleAddToPortfolio")
    console.log(event);
    console.log(stockInfo);
    postInvestment.mutate({
      Symbol: stockInfo.data?.company.Symbol || "",
      AssetType: stockInfo.data?.company.AssetType || "",
      Name: stockInfo.data?.company.Name || "",
      Description: stockInfo.data?.company.Description || "",
      MarketCapitalization: stockInfo.data?.company.MarketCapitalization || "",
    });

  }
  
  const { data } = api.stocks.getAll.useQuery();
  console.log("DB DATA:", typeof data, data)

  const DisplayCompanyInfo: React.FC = () => {
    if (stockInfo.data?.company.Symbol) {
      return (
        <div className="flex flex-col gap-y-4">
          <div className="flex gap-x-8 items-center">
            <div>
              <h3 className="text-xs text-white">TICKER</h3>
              <h2 className="mb-2 text-2xl text-white">
                {stockInfo.data
                  ? stockInfo.data.company.Symbol
                  : "Searching for stock..."}
              </h2>
            </div>
            <div>
              <button
                // type="submit"
                className="inline-flex justify-center rounded-md bg-indigo-600 py-2 px-3 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-500"
                onClick={handleAddToPortfolio}
              >
                Add To Portfolio
              </button>
            </div>
          </div>
          <div>
            <h3 className="text-xs text-white">COMPANY NAME</h3>
            <h2 className="mb-2 text-2xl text-white">
              {stockInfo.data
                ? stockInfo.data.company.Name
                : "Searching for stock..."}
            </h2>
          </div>
          <div>
            <h3 className="text-xs text-white">ASSET TYPE</h3>
            <h2 className="mb-2 text-2xl text-white">
              {stockInfo.data
                ? stockInfo.data.company.AssetType
                : "Searching for stock..."}
            </h2>
          </div>
          <div>
            <h3 className="text-xs text-white">MARKET CAPITALIZATION</h3>
            <h2 className="mb-2 text-2xl text-white">
              {stockInfo.data?.company.Symbol
                ? `$ ${stockInfo.data.company.MarketCapitalization} B`
                : ""}
            </h2>
          </div>
          <div>
            <h3 className="text-xs text-white">SUMMARY</h3>
            <h2 className="mb-2 text-2xl leading-normal text-white">
              {stockInfo.data
                ? stockInfo.data.company.Description
                : "Searching for stock..."}
            </h2>
          </div>
        </div>
      );
    }
    return <div></div>;
  };
  
  return (
    <>
      <Head>
        <title>Paper Stock Portfolio</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-neutral-900">
        <div className="justify-left container flex w-2/3 flex-col items-center gap-12 px-4 py-16 ">
          <h1 className="text-left text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Paper Stock Portfolio
          </h1>
          <div>
            <p className="text-2xl text-white">
              {hello.data ? hello.data.greeting : "Loading tRPC query..."}
            </p>
          </div>
          <div className="w-full rounded-xl bg-white/10 p-4">
            <table className="w-full table-fixed text-white">
              <thead>
                <tr className="text-left">
                  <th>Ticker</th>
                  <th>Company</th>
                  <th>Market Cap</th>
                  <th>Percent holdings</th>
                </tr>
              </thead>
              <tbody>
                {data?.map((investment) => (
                  <tr
                    key={investment.id}
                    className="text-white hover:bg-white/20"
                  >
                    <td>{investment.ticker}</td>
                    <td>{investment.company}</td>
                    <td>{investment.marketCap}</td>
                    <td>{investment.percentHoldings} %</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          <div className="flex w-full flex-col justify-start gap-2">
            <div className="mb-8">
              <Form setTickerInput={setTickerInput}/>
              <DisplayCompanyInfo />
            </div>
            <AuthShowcase />
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined },
    );
    
    return (
      <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};

